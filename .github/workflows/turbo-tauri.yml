name: Turbo Tauri

on:
  workflow_call:
    inputs:
      app_root:
        type: string
        description: The root directory of the app.
        required: false
        default: .
      app_version:
        type: string
        description: The version of the app.
        required: false
        default: "0.0.0"
      app_version_android:
        type: string
        description: The version of the app for Android, CANNOT be `0.0.0`
        required: false
        default: "0.0.1"
      release_name:
        type: string
        description: The name of the release.
        required: false
        default: Release
      release_notes:
        type: string
        description: The release notes.
        required: false
        default: ""
      release_tag:
        type: string
        description: The tag to use for the release.
        required: false
        default: "v0.0.0"
      prerelease:
        type: boolean
        description: Whether to make the release a prerelease.
        required: false
        default: false
      delete_release:
        type: boolean
        description: Whether to delete the release.
        required: false
        default: true
      turbo_team:
        type: string
        description: The team to use for Turbo.
        required: true
      android_key_path:
        type: string
        description: The path to the Android key file, relative to app_root
        required: false
        default: "upload.jks"
      aur_package_name:
        type: string
        description: The name of the AUR package.
        required: false
        default: ""
      aur_key_algorithm:
        type: string
        description: The algorithm to use for the AUR key.
        required: false
        default: "ed25519"
      task_build:
        type: string
        description: The task to run for building the app.
        required: false
        default: "tauri:build"
      task_build_android:
        type: string
        description: The task to run for building the app for Android.
        required: false
        default: "tauri:build:android"
      android_key_alias:
        type: string
        description: The alias of the Android key.
        required: false
        default: "upload"
    secrets:
      # GITHUB_TOKEN:
      #   description: Authenticate GitHub to publish releases.
      #   required: true
      TURBO_TOKEN:
        description: Authenticate Turbo to enable Remote Cache.
        required: false
      # GEMINI_API_KEY:
      #   description: Authenticate Google Gemini to generate changelog.
      #   required: false
      TAURI_SIGNING_PRIVATE_KEY:
        description: Sign app binaries for updater support.
        required: false
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD:
        description: Password for the signing key.
        required: false
      ANDROID_KEYSTORE:
        description: Base64 of `jks` file for APK signing.
        required: false
      ANDROID_KEYSTORE_PASSWORD:
        description: Password for the keystore.
        required: false
      BUILD_ENV:
        description: "Environment variables to pass to `tauri build`. Format: `key1=value1\\nkey2=value2\\n...`."
        required: false
      AUR_SSH_PRIVATE_KEY:
        description: "SSH private key for AUR publishing."
        required: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Delete release
        if: inputs.delete_release == true
        run: |
          gh release delete nightly --yes --cleanup-tag || true
          sleep 1
      - name: Create release
        run: |
          tag="${{ inputs.release_tag }}"
          name="${{ inputs.release_name }}"
          notes="${{ inputs.release_notes }}"
          gh release create "$tag" --title "$name" --notes "$notes" ${{ inputs.prerelease == true && '--prerelease' || '' }}

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ inputs.turbo_team }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - name: Build frontend
        run: pnpm build

  publish-tauri:
    needs: [create-release, build-frontend]
    outputs:
      hash: ${{ steps.sha256sum.outputs.hash }}
      deb_filename: ${{ steps.deb_filename.outputs.deb_filename }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # platform: The platform to build for
          # args: Arguments to pass to `tauri build`
          # rust_targets: Rust targets
          # android: Whether to build for Android
          # dist_dir: Directory of the distribution files, relative to app_root

          - platform: "ubuntu-22.04"
            dist_dir: "src-tauri/target/release/bundle/deb"
            dist_ext: "deb"

          - platform: "windows-latest"
            dist_dir: "src-tauri/target/release/bundle/nsis"
            dist_ext: "exe"

          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            rust_targets: "aarch64-apple-darwin"
            dist_dir: "src-tauri/target/aarch64-apple-darwin/release/bundle/dmg"
            dist_ext: "dmg"

          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
            rust_targets: "x86_64-apple-darwin"
            dist_dir: "src-tauri/target/x86_64-apple-darwin/release/bundle/dmg"
            dist_ext: "dmg"

          # - platform: "ubuntu-22.04"
          #   rust_targets: "armv7-linux-androideabi,i686-linux-android,x86_64-linux-android,aarch64-linux-android"
          #   android: true
          #   dist_dir: "src-tauri/gen/android/app/build/outputs/apk/universal/release"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      #region Prepare environment
      - name: Linux - Install dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libudev-dev
      - uses: pnpm/action-setup@v4
        id: pnpm
        name: Install pnpm
        with:
          run_install: false
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_targets }}
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "${{ inputs.app_root }}/src-tauri -> target"
      #endregion

      #region Android - Prepare environment
      - name: Android - Setup Java
        if: matrix.android
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
      - name: Android - Setup Android SDK
        if: matrix.android
        uses: android-actions/setup-android@v3
      - name: Android - Setup Android NDK
        if: matrix.android
        run: sdkmanager "ndk;27.0.11902837"
      - name: Android - Setup Android APK Signing
        if: matrix.android
        run: |
          cd ${{ inputs.app_root }}/src-tauri/gen/android
          cat > keystore.properties <<EOF
          password=${{ secrets.ANDROID_RELEASE_PASSWORD }}
          keyAlias=${{ inputs.android_key_alias }}
          storeFile=${{ inputs.android_key_path }}
          EOF
          echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" | base64 --decode > ${{ inputs.app_root }}/${{ inputs.android_key_path }}
      #endregion
      #region Edit version
      - name: Linux - Edit version
        if: matrix.platform == 'ubuntu-22.04' && !matrix.android
        run: |
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${{ inputs.app_version }}\"/" ${{ inputs.app_root }}/src-tauri/tauri.conf.json
      - name: MacOS - Edit version
        if: matrix.platform == 'macos-latest'
        run: |
          sed -i '' "s/\"version\": \"[^\"]*\"/\"version\": \"${{ inputs.app_version }}\"/" ${{ inputs.app_root }}/src-tauri/tauri.conf.json
      - name: Windows - Edit version
        if: matrix.platform == 'windows-latest'
        run: |
          (Get-Content -Path "${{ inputs.app_root }}/src-tauri/tauri.conf.json" -Raw) -replace '"version": "[^"]*"', '"version": "${{ inputs.app_version }}"' | Set-Content -Path "${{ inputs.app_root }}/src-tauri/tauri.conf.json"
      - name: Android - Edit version
        if: matrix.platform == 'ubuntu-22.04' && matrix.android
        run: |
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${{ inputs.app_version_android }}\"/" ${{ inputs.app_root }}/src-tauri/tauri.conf.json
      #endregion
      #region Build
      - name: Linux Macos - Build
        if: matrix.platform != 'windows-latest'
        run: |
          envs="${{ secrets.BUILD_ENV }}"
          envs_with_export=$(echo $envs | sed 's/^/export /')
          eval $envs_with_export
          pnpm turbo run ${{ matrix.android && inputs.task_build_android || inputs.task_build }}
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ inputs.turbo_team }}
          TAURI_BUILD_ARGS: ${{ matrix.args }}
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/27.0.11902837
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      - name: Windows - Build
        if: matrix.platform == 'windows-latest'
        run: |
          $envs = @"
          ${{ secrets.BUILD_ENV }}
          "@
          $envs -split "`n" | ForEach-Object {
              $key, $value = $_ -split '=', 2
              if ($key -and $value) {
                  Set-Item -Path "env:$($key.Trim())" -Value $value.Trim()
              }
          }
          pnpm turbo run ${{ inputs.task_build }}
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ inputs.turbo_team }}
          TAURI_BUILD_ARGS: ${{ matrix.args }}
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/27.0.11902837
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: MacOS - Remove unnessary files
        if: matrix.platform == 'macos-latest'
        run: |
          rm -rf ${{ inputs.app_root }}/${{ matrix.dist_dir }}/*.{sh,icns} || true
      - name: Linux Macos - Upload
        if: matrix.platform != 'windows-latest'
        run: |
          gh release upload ${{ inputs.release_tag }} ${{ inputs.app_root }}/${{ matrix.dist_dir }}/*.${{ matrix.dist_ext }} --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Windows - Upload
        if: matrix.platform == 'windows-latest'
        run: |
          cd ${{ inputs.app_root }}/${{ matrix.dist_dir }}
          gh release upload ${{ inputs.release_tag }} (Get-Item .\*.${{ matrix.dist_ext }}).FullName --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - id: sha256sum
        name: Linux - Calculate SHA256 hash for AUR package
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          cd ${{ inputs.app_root }}/src-tauri/target/release/bundle/deb
          sha256sum ./*.deb | awk '{print $1}' > sha256sum.txt
          echo "hash=$(cat sha256sum.txt)" >> "$GITHUB_OUTPUT"

      - id: deb_filename
        name: Linux - Get filename for AUR package
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          cd ${{ inputs.app_root }}/src-tauri/target/release/bundle/deb
          echo "filename=$(ls *.deb)" >> "$GITHUB_OUTPUT"
      #endregion

  generate-updater-json:
    needs: [create-release, publish-tauri]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate latest.json
        run: |
          changelog="${{ inputs.release_notes }}"
          changelog=$(echo "$changelog" | awk '{printf "%s\n", $0}' | sed 's/"/\\"/g')
          signature=$(gh release download ${{ inputs.release_tag }} -p "*.exe.sig" -O -)
          url=$(gh release view ${{ inputs.release_tag }} --json assets -q '.assets.[] | .url | select(endswith(".exe"))')
          echo '{' > latest.json
          echo '  "version": "${{ inputs.app_version }}",' >> latest.json
          echo '  "notes": "${{ inputs.release_notes }}",' >> latest.json'
          # RFC 3339 format
          echo "  \"pub_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"," >> latest.json
          echo '  "platforms": {' >> latest.json
          echo '  "windows-x86_64": {' >> latest.json
          echo "    \"signature\": \"${signature}\"," >> latest.json
          echo "    \"url\": \"${url}\""" >> latest.json
          echo '  }' >> latest.json
          echo '}' >> latest.json
          cat latest.json
          gh release upload ${{ inputs.release_tag }} latest.json --clobber

  bump-aur-version:
    needs: publish-tauri
    runs-on: ubuntu-latest
    if: inputs.aur_package_name != ''
    steps:
      - uses: actions/checkout@v4
      - name: Setup AUR private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/id_${{ inputs.aur_key_algorithm }}
          chmod 600 ~/.ssh/id_${{ inputs.aur_key_algorithm }}
          ssh-keyscan -t "${{ inputs.aur_key_algorithm }}" aur.archlinux.org >> ~/.ssh/known_hosts
      - name: Clone AUR repository
        run: git clone ssh://aur@aur.archlinux.org/${{ inputs.aur_package_name }}.git./aurpackage
      - name: Update version in PKGBUILD and .SRCINFO
        run: |
          cd aurpackage
          sed -i "s/pkgver=.*$/pkgver=r${{ github.run_number }}/" PKGBUILD
          sed -i "s/pkgver = .*$/pkgver = r${{ github.run_number }}/" .SRCINFO
          sed -i "s/source_x86_64=('.*')/source_x86_64=('https://github.com/${{ github.repository }}/releases/download/${{ inputs.release_tag }}/${{ needs.publish-tauri.outputs.deb_filename }}')/" PKGBUILD
          sed -i "s/source_x86_64 = .*$/source_x86_64 = https://github.com/${{ github.repository }}/releases/download/${{ inputs.release_tag }}/${{ needs.publish-tauri.outputs.deb_filename }}/" .SRCINFO
          sed -i "s/^sha256sums_x86_64=('.*')$/sha256sums_x86_64=('${{ needs.publish-tauri.outputs.hash }}')/" PKGBUILD
          sed -i "s/sha256sums_x86_64 = .*$/sha256sums_x86_64 = ${{ needs.publish-tauri.outputs.hash }}/" .SRCINFO
      - name: Commit and push changes
        run: |
          cd aurpackage
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add PKGBUILD .SRCINFO
          git commit -m "Bump version to ${{ inputs.app_version }} (Powered by Turbo Tauri)"
          git push origin master
